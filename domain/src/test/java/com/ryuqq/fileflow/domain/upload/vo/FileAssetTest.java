package com.ryuqq.fileflow.domain.upload.vo;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@DisplayName("FileAsset Domain Entity 테스트")
class FileAssetTest {

    @Nested
    @DisplayName("생성 테스트")
    class CreateTest {

        @Test
        @DisplayName("유효한 파라미터로 FileAsset을 생성할 수 있다")
        void createFileAsset() {
            // given
            String sessionId = "session123";
            TenantId tenantId = TenantId.of("tenant-001");
            S3Location s3Location = S3Location.of("fileflow-bucket", "uploads/2024/file.jpg");
            CheckSum checksum = CheckSum.sha256("a".repeat(64));
            FileSize fileSize = FileSize.ofMegabytes(10);
            ContentType contentType = ContentType.of("image/jpeg");

            // when
            FileAsset fileAsset = FileAsset.create(
                    sessionId, tenantId, s3Location, checksum, fileSize, contentType
            );

            // then
            assertThat(fileAsset.getFileId()).isNotNull();
            assertThat(fileAsset.getSessionId()).isEqualTo(sessionId);
            assertThat(fileAsset.getTenantId()).isEqualTo(tenantId);
            assertThat(fileAsset.getS3Location()).isEqualTo(s3Location);
            assertThat(fileAsset.getChecksum()).isEqualTo(checksum);
            assertThat(fileAsset.getFileSize()).isEqualTo(fileSize);
            assertThat(fileAsset.getContentType()).isEqualTo(contentType);
            assertThat(fileAsset.getCreatedAt()).isNotNull();
            assertThat(fileAsset.getCreatedAt()).isBeforeOrEqualTo(LocalDateTime.now());
        }

        @Test
        @DisplayName("FileId는 자동으로 생성된다")
        void fileIdAutoGenerated() {
            // given
            FileAsset asset1 = FileAsset.create(
                    "session1",
                    TenantId.of("tenant-001"),
                    S3Location.of("fileflow-bucket", "uploads/file.jpg"),
                    CheckSum.sha256("a".repeat(64)),
                    FileSize.ofMegabytes(10),
                    ContentType.of("image/jpeg")
            );
            FileAsset asset2 = FileAsset.create(
                    "session2",
                    TenantId.of("tenant-001"),
                    S3Location.of("fileflow-bucket", "uploads/file.jpg"),
                    CheckSum.sha256("a".repeat(64)),
                    FileSize.ofMegabytes(10),
                    ContentType.of("image/jpeg")
            );

            // when & then
            assertThat(asset1.getFileId()).isNotNull();
            assertThat(asset2.getFileId()).isNotNull();
            assertThat(asset1.getFileId()).isNotEqualTo(asset2.getFileId());
        }

        @Test
        @DisplayName("기존 FileAsset을 재구성할 수 있다")
        void reconstituteFileAsset() {
            // given
            FileId fileId = FileId.generate();
            String sessionId = "session123";
            TenantId tenantId = TenantId.of("tenant-001");
            S3Location s3Location = S3Location.of("fileflow-bucket", "uploads/file.jpg");
            CheckSum checksum = CheckSum.sha256("a".repeat(64));
            FileSize fileSize = FileSize.ofMegabytes(5);
            ContentType contentType = ContentType.of("image/png");
            LocalDateTime createdAt = LocalDateTime.now().minusHours(1);

            // when
            FileAsset fileAsset = FileAsset.reconstitute(
                    fileId, sessionId, tenantId, s3Location, checksum, fileSize, contentType, createdAt
            );

            // then
            assertThat(fileAsset.getFileId()).isEqualTo(fileId);
            assertThat(fileAsset.getSessionId()).isEqualTo(sessionId);
            assertThat(fileAsset.getTenantId()).isEqualTo(tenantId);
            assertThat(fileAsset.getS3Location()).isEqualTo(s3Location);
            assertThat(fileAsset.getChecksum()).isEqualTo(checksum);
            assertThat(fileAsset.getFileSize()).isEqualTo(fileSize);
            assertThat(fileAsset.getContentType()).isEqualTo(contentType);
            assertThat(fileAsset.getCreatedAt()).isEqualTo(createdAt);
        }
    }

    @Nested
    @DisplayName("검증 실패 테스트")
    class ValidationTest {

        @Test
        @DisplayName("sessionId가 null이면 예외가 발생한다")
        void createWithNullSessionId() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            null,
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("SessionId cannot be null or empty");
        }

        @Test
        @DisplayName("sessionId가 빈 문자열이면 예외가 발생한다")
        void createWithEmptySessionId() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "   ",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("SessionId cannot be null or empty");
        }

        @Test
        @DisplayName("tenantId가 null이면 예외가 발생한다")
        void createWithNullTenantId() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "session123",
                            null,
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("TenantId cannot be null");
        }

        @Test
        @DisplayName("s3Location이 null이면 예외가 발생한다")
        void createWithNullS3Location() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "session123",
                            TenantId.of("tenant-001"),
                            null,
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("S3Location cannot be null");
        }

        @Test
        @DisplayName("checksum이 null이면 예외가 발생한다")
        void createWithNullChecksum() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            null,
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("CheckSum cannot be null");
        }

        @Test
        @DisplayName("fileSize가 null이면 예외가 발생한다")
        void createWithNullFileSize() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            null,
                            ContentType.of("image/jpeg")
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("FileSize cannot be null");
        }

        @Test
        @DisplayName("contentType이 null이면 예외가 발생한다")
        void createWithNullContentType() {
            assertThatThrownBy(() ->
                    FileAsset.create(
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            null
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("ContentType cannot be null");
        }

        @Test
        @DisplayName("재구성 시 fileId가 null이면 예외가 발생한다")
        void reconstituteWithNullFileId() {
            assertThatThrownBy(() ->
                    FileAsset.reconstitute(
                            null,
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg"),
                            LocalDateTime.now()
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("FileId cannot be null");
        }

        @Test
        @DisplayName("재구성 시 createdAt이 null이면 예외가 발생한다")
        void reconstituteWithNullCreatedAt() {
            assertThatThrownBy(() ->
                    FileAsset.reconstitute(
                            FileId.generate(),
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg"),
                            null
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("CreatedAt cannot be null");
        }

        @Test
        @DisplayName("재구성 시 createdAt이 미래 시간이면 예외가 발생한다")
        void reconstituteWithFutureCreatedAt() {
            LocalDateTime future = LocalDateTime.now().plusHours(1);

            assertThatThrownBy(() ->
                    FileAsset.reconstitute(
                            FileId.generate(),
                            "session123",
                            TenantId.of("tenant-001"),
                            S3Location.of("bucket", "key"),
                            CheckSum.sha256("a".repeat(64)),
                            FileSize.ofMegabytes(1),
                            ContentType.of("image/jpeg"),
                            future
                    )
            ).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining("CreatedAt cannot be in the future");
        }
    }

    @Nested
    @DisplayName("비즈니스 규칙 테스트")
    class BusinessRuleTest {

        @Test
        @DisplayName("이미지 파일인지 확인할 수 있다")
        void isImage() {
            // given
            FileAsset imageAsset = createFileAsset("session1", ContentType.of("image/jpeg"));
            FileAsset videoAsset = createFileAsset("session2", ContentType.of("video/mp4"));

            // when & then
            assertThat(imageAsset.isImage()).isTrue();
            assertThat(videoAsset.isImage()).isFalse();
        }

        @Test
        @DisplayName("비디오 파일인지 확인할 수 있다")
        void isVideo() {
            // given
            FileAsset videoAsset = createFileAsset("session1", ContentType.of("video/mp4"));
            FileAsset imageAsset = createFileAsset("session2", ContentType.of("image/png"));

            // when & then
            assertThat(videoAsset.isVideo()).isTrue();
            assertThat(imageAsset.isVideo()).isFalse();
        }

        @Test
        @DisplayName("문서 파일인지 확인할 수 있다")
        void isDocument() {
            // given
            FileAsset pdfAsset = createFileAsset("session1", ContentType.of("application/pdf"));
            FileAsset imageAsset = createFileAsset("session2", ContentType.of("image/jpeg"));

            // when & then
            assertThat(pdfAsset.isDocument()).isTrue();
            assertThat(imageAsset.isDocument()).isFalse();
        }

        @Test
        @DisplayName("주어진 크기 제한을 초과하는지 확인할 수 있다")
        void exceedsSize() {
            // given
            FileAsset asset = createFileAssetWithSize(FileSize.ofMegabytes(10));
            FileSize maxSize5MB = FileSize.ofMegabytes(5);
            FileSize maxSize15MB = FileSize.ofMegabytes(15);

            // when & then
            assertThat(asset.exceedsSize(maxSize5MB)).isTrue();
            assertThat(asset.exceedsSize(maxSize15MB)).isFalse();
        }

        @Test
        @DisplayName("S3 URI를 반환할 수 있다")
        void getS3Uri() {
            // given
            S3Location location = S3Location.of("fileflow-bucket", "uploads/2024/file.jpg");
            FileAsset asset = createFileAssetWithLocation(location);

            // when
            String uri = asset.getS3Uri();

            // then
            assertThat(uri).isEqualTo("s3://fileflow-bucket/uploads/2024/file.jpg");
        }

        @Test
        @DisplayName("사람이 읽기 쉬운 파일 크기를 반환할 수 있다")
        void getHumanReadableSize() {
            // given
            FileAsset asset = createFileAssetWithSize(FileSize.ofMegabytes(10));

            // when
            String readableSize = asset.getHumanReadableSize();

            // then
            assertThat(readableSize).isEqualTo("10.00 MB");
        }
    }

    @Nested
    @DisplayName("동등성 테스트")
    class EqualityTest {

        @Test
        @DisplayName("같은 FileId를 가진 FileAsset은 동일하다")
        void equalsBySameFileId() {
            // given
            FileId fileId = FileId.generate();
            FileAsset asset1 = FileAsset.reconstitute(
                    fileId, "session1", TenantId.of("tenant-001"),
                    S3Location.of("bucket", "key1"),
                    CheckSum.sha256("a".repeat(64)),
                    FileSize.ofMegabytes(1),
                    ContentType.of("image/jpeg"),
                    LocalDateTime.now()
            );
            FileAsset asset2 = FileAsset.reconstitute(
                    fileId, "session2", TenantId.of("tenant-002"),
                    S3Location.of("bucket", "key2"),
                    CheckSum.sha256("b".repeat(64)),
                    FileSize.ofMegabytes(2),
                    ContentType.of("image/png"),
                    LocalDateTime.now()
            );

            // when & then
            assertThat(asset1).isEqualTo(asset2);
            assertThat(asset1.hashCode()).isEqualTo(asset2.hashCode());
        }

        @Test
        @DisplayName("다른 FileId를 가진 FileAsset은 다르다")
        void notEqualsByDifferentFileId() {
            // given
            FileAsset asset1 = createFileAsset("session1");
            FileAsset asset2 = createFileAsset("session1");

            // when & then
            assertThat(asset1).isNotEqualTo(asset2);
        }
    }

    // ========== Test Helper Methods ==========

    private FileAsset createFileAsset(String sessionId) {
        return FileAsset.create(
                sessionId,
                TenantId.of("tenant-001"),
                S3Location.of("fileflow-bucket", "uploads/file.jpg"),
                CheckSum.sha256("a".repeat(64)),
                FileSize.ofMegabytes(10),
                ContentType.of("image/jpeg")
        );
    }

    private FileAsset createFileAsset(String sessionId, ContentType contentType) {
        return FileAsset.create(
                sessionId,
                TenantId.of("tenant-001"),
                S3Location.of("fileflow-bucket", "uploads/file.jpg"),
                CheckSum.sha256("a".repeat(64)),
                FileSize.ofMegabytes(10),
                contentType
        );
    }

    private FileAsset createFileAssetWithSize(FileSize fileSize) {
        return FileAsset.create(
                "session123",
                TenantId.of("tenant-001"),
                S3Location.of("fileflow-bucket", "uploads/file.jpg"),
                CheckSum.sha256("a".repeat(64)),
                fileSize,
                ContentType.of("image/jpeg")
        );
    }

    private FileAsset createFileAssetWithLocation(S3Location s3Location) {
        return FileAsset.create(
                "session123",
                TenantId.of("tenant-001"),
                s3Location,
                CheckSum.sha256("a".repeat(64)),
                FileSize.ofMegabytes(10),
                ContentType.of("image/jpeg")
        );
    }
}
