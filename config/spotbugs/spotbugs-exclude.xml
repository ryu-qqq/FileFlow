<?xml version="1.0" encoding="UTF-8"?>
<!--
    SpotBugs Exclusion Configuration
    Enterprise Spring Boot Standards

    @author Architecture Team (arch-team@company.com)
    @since 2024-01-01
-->
<FindBugsFilter>
    <!-- ========================================
         Exclude Generated Code
         ======================================== -->
    <Match>
        <Class name="~.*\.Q.*"/>  <!-- QueryDSL generated classes -->
    </Match>

    <Match>
        <Package name="~.*\.generated\..*"/>
    </Match>

    <!-- ========================================
         Exclude Test Code from Certain Rules
         ======================================== -->
    <Match>
        <Class name="~.*Test"/>
        <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME"/>
    </Match>

    <!-- ========================================
         Configuration Classes
         ======================================== -->
    <Match>
        <Class name="~.*Configuration"/>
        <Bug pattern="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
    </Match>

    <!-- ========================================
         Adapter and Strategy Classes - Constructor Validation
         Adapters and Strategy implementations validate parameters
         in constructors which is a correct defensive programming practice.
         CT_CONSTRUCTOR_THROW warnings are acceptable for these classes.
         EI2 warnings for storing repository/factory dependencies are
         false positives as these are immutable service layer dependencies.
         ======================================== -->
    <Match>
        <Or>
            <Class name="~.*Adapter"/>
            <Class name="~.*Strategy"/>
        </Or>
        <Or>
            <Bug pattern="CT_CONSTRUCTOR_THROW"/>
            <Bug pattern="EI_EXPOSE_REP2"/>
        </Or>
    </Match>

    <!-- ========================================
         Service Layer Constructor Dependency Injection
         Service classes store repository port dependencies via
         constructor injection. These are immutable references to
         service layer dependencies. EI2 warnings are false positives.
         ======================================== -->
    <Match>
        <Class name="~.*Service"/>
        <Bug pattern="EI_EXPOSE_REP2"/>
    </Match>

    <!-- ========================================
         Java Records - Immutable by Design
         Records are immutable data carriers introduced in Java 14+.
         The record components are automatically final, and defensive
         copies are unnecessary. EI_EXPOSE_REP warnings are false
         positives for record classes.
         ======================================== -->
    <Match>
        <Class name="~.*Response"/>
        <Or>
            <Bug pattern="EI_EXPOSE_REP"/>
            <Bug pattern="EI_EXPOSE_REP2"/>
        </Or>
    </Match>

    <!-- ========================================
         Domain Aggregates and Value Objects - Final Classes
         Domain aggregates and value objects are final classes that
         cannot be extended. Finalizer attacks are impossible, making
         CN_IDIOM_NO_SUPER_CALL and CT_CONSTRUCTOR_THROW warnings false
         positives.
         ======================================== -->
    <Match>
        <Or>
            <Class name="~.*\.domain\..*\.Tenant"/>
            <Class name="~.*\.domain\..*\.TenantName"/>
            <Class name="~.*\.domain\..*\.Organization"/>
            <Class name="~.*\.domain\..*\.OrgCode"/>
        </Or>
        <Or>
            <Bug pattern="CN_IDIOM_NO_SUPER_CALL"/>
            <Bug pattern="CT_CONSTRUCTOR_THROW"/>
        </Or>
    </Match>

    <!-- ========================================
         Value Object Normalization
         Value objects use toUpperCase for consistent normalization
         (e.g., OrgCode). This is intentional business logic, not a
         locale bug. Dm warnings for constructors are acceptable.
         ======================================== -->
    <Match>
        <Class name="com.ryuqq.fileflow.domain.iam.organization.OrgCode"/>
        <Bug pattern="Dm"/>
    </Match>

    <!-- ========================================
         String Encoding Operations
         - Base64 encoding is charset-independent (DM_DEFAULT_ENCODING)
         - String case operations for enum parsing use system locale
           intentionally (Dm warnings acceptable)
         ======================================== -->
    <Match>
        <Class name="~.*QueryRepositoryAdapter"/>
        <Method name="gtCursor"/>
        <Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <Match>
        <Class name="~.*QueryService"/>
        <Method name="encodeCursor"/>
        <Bug pattern="DM_DEFAULT_ENCODING"/>
    </Match>

    <Match>
        <Or>
            <Class name="com.ryuqq.fileflow.application.iam.tenant.service.TenantCommandService"/>
            <Class name="com.ryuqq.fileflow.application.iam.organization.service.OrganizationCommandService"/>
        </Or>
        <Method name="parseStatus"/>
        <Bug pattern="Dm"/>
    </Match>

    <!-- ========================================
         QueryDSL Exception Handling
         Defensive exception handling in repository query methods
         is intentional to prevent query execution failures from
         propagating. REC_CATCH_EXCEPTION warnings are acceptable.
         ======================================== -->
    <Match>
        <Class name="~.*QueryRepositoryAdapter"/>
        <Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>

    <!-- ========================================
         Known Null Load Patterns
         Certain mapper patterns intentionally handle null values
         during entity transformation. NP_LOAD_OF_KNOWN_NULL_VALUE
         warnings are acceptable in these controlled scenarios.
         ======================================== -->
    <Match>
        <Class name="~.*EntityMapper"/>
        <Method name="toEntity"/>
        <Bug pattern="NP_LOAD_OF_KNOWN_NULL_VALUE"/>
    </Match>
</FindBugsFilter>
